---
name: 'ðŸ”¥ Infra deployment workflow'

on:
  workflow_dispatch:
  push:
    branches:
      - feature/*
      - fix/*
      - main

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AWS_REGION: 'eu-central-1'
  TERRAFORM_VERSION: 1.3.8
  TERRAFORM_WORKING_DIRECTORY_ENVS: "./infra-modules"

jobs:
  deploy-dev:
    runs-on: ubuntu-20.04
    environment: dev
    strategy:
      matrix:
        layer: [ 'network', 'ecs_cluster' ,'load_balancer', 'ecs_task_definition', 'tg', 'listener' ]
      max-parallel: 1
    env:
      ACCOUNT_NUMBER: 111111111111
      ROLE_ARN: 'arn:aws:iam::373360184536:role/ALZP-WL-TerraformDeploymentRole'
      TF_BUCKET_NAME: 'tfstate-bucket'
      TF_DYNAMODB_TABLENAME: 'terraform_state_lock'
      KMS_KEY_NAME: alias/aws/s3

      ARM_USE_OIDC: true
    steps:
      - uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::${{ env.MANAGEMENT_ACCOUNT_ID }}:role/service/GithubRunnerRole
          role-session-name: oidcrolesession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Run a Terraform fmt
      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: terraform plan and validate
        uses: ./.github/actions/tf-plan-and-validate
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          environment: dev
          region: ${{ env.AWS_REGION }}
          bucket_name: ${{ env.TF_BUCKET_NAME }}
          dynamodb_table_name: ${{ env.TF_DYNAMODB_TABLENAME }}
          encrypted: true
          kms_key_id: ${{ env.KMS_KEY_NAME }}
          layer: ${{ matrix.layer }}
          working_directory: ${{ env.TERRAFORM_WORKING_DIRECTORY_ENVS }}

      - name: terraform apply
        uses: ./.github/actions/tf-apply
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          environment: dev
          region: ${{ env.AWS_REGION }}
          bucket_name: ${{ env.TF_BUCKET_NAME }}
          dynamodb_table_name: ${{ env.TF_DYNAMODB_TABLENAME }}
          encrypted: true
          kms_key_id: ${{ env.KMS_KEY_NAME }}
          layer: ${{ matrix.layer }}
          working_directory: ${{ env.TERRAFORM_WORKING_DIRECTORY_ENVS }}


  deploy-prod:
    if: ${{ github.ref_name == 'main' }}
    needs: deploy-dev
    runs-on: ubuntu-20.04
    environment: prod
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        layer: [ 'network', 'ecs_cluster' ,'load_balancer', 'ecs_task_definition', 'tg', 'listener' ]
    env:
      ACCOUNT_NUMBER: 111111111111
      ROLE_ARN: 'arn:aws:iam::373360184536:role/ALZP-WL-TerraformDeploymentRole'
      TF_BUCKET_NAME: 'tfstate-bucket'
      TF_DYNAMODB_TABLENAME: 'terraform_state_lock'
      KMS_KEY_NAME: alias/aws/s3
    steps:
      - uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::${{ env.MANAGEMENT_ACCOUNT_ID }}:role/service/GithubRunnerRole
          role-session-name: oidcrolesession
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: terraform plan and validate
        uses: ./.github/actions/tf-plan-and-validate
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          environment: prd
          region: ${{ env.AWS_REGION }}
          bucket_name: ${{ env.TF_BUCKET_NAME }}
          dynamodb_table_name: ${{ env.TF_DYNAMODB_TABLENAME }}
          encrypted: true
          kms_key_id: ${{ env.KMS_KEY_NAME }}
          layer: ${{ matrix.layer }}
          working_directory: ${{ env.TERRAFORM_WORKING_DIRECTORY_ENVS }}

      - name: terraform apply
        uses: ./.github/actions/tf-apply
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          environment: prd
          region: ${{ env.AWS_REGION }}
          bucket_name: ${{ env.TF_BUCKET_NAME }}
          dynamodb_table_name: ${{ env.TF_DYNAMODB_TABLENAME }}
          encrypted: true
          kms_key_id: ${{ env.KMS_KEY_NAME }}
          layer: ${{ matrix.layer }}
          working_directory: ${{ env.TERRAFORM_WORKING_DIRECTORY_ENVS }}